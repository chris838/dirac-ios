
/* autogenerated from schroorc.orc */

#ifndef _SCHROORC_H_
#define _SCHROORC_H_


#ifdef __cplusplus
extern "C" {
#endif

void schro_orc_init (void);



#include <orc/orc.h>

extern OrcCode *_orc_code_orc_add2_rshift_add_s16_22_vert;
static inline void
orc_add2_rshift_add_s16_22_vert (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s16_22_vert;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_add_s32_22_vert;
static inline void
orc_add2_rshift_add_s32_22_vert (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s32_22_vert;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_add_s16_22;
static inline void
orc_add2_rshift_add_s16_22 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s16_22;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_add_s32_22;
static inline void
orc_add2_rshift_add_s32_22 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s32_22;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_sub_s16_22_vert;
static inline void
orc_add2_rshift_sub_s16_22_vert (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_sub_s16_22_vert;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_sub_s16_22;
static inline void
orc_add2_rshift_sub_s16_22 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_sub_s16_22;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_add_s16_11_op;
static inline void
orc_add2_rshift_add_s16_11_op (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, const orc_int16 * ORC_RESTRICT s3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s16_11_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_add_s16_11;
static inline void
orc_add2_rshift_add_s16_11 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s16_11;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_sub_s16_11_vert;
static inline void
orc_add2_rshift_sub_s16_11_vert (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_sub_s16_11_vert;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_sub_s32_11_vert;
static inline void
orc_add2_rshift_sub_s32_11_vert (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_sub_s32_11_vert;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_sub_s16_11;
static inline void
orc_add2_rshift_sub_s16_11 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_sub_s16_11;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_sub_s32_11;
static inline void
orc_add2_rshift_sub_s32_11 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_sub_s32_11;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add_const_rshift_s16_11;
static inline void
orc_add_const_rshift_s16_11 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add_const_rshift_s16_11;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add_const_rshift_s16;
static inline void
orc_add_const_rshift_s16 (orc_int16 * ORC_RESTRICT d1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add_const_rshift_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add_const_rshift_s32;
static inline void
orc_add_const_rshift_s32 (orc_int32 * ORC_RESTRICT d1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add_const_rshift_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add_s16;
static inline void
orc_add_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add_s16_2d;
static inline void
orc_add_s16_2d (orc_int16 * ORC_RESTRICT d1, int d1_stride, const orc_int16 * ORC_RESTRICT s1, int s1_stride, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add_s16_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_addc_rshift_s16;
static inline void
orc_addc_rshift_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int p1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_addc_rshift_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_lshift1_s16;
static inline void
orc_lshift1_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_lshift1_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_lshift2_s16;
static inline void
orc_lshift2_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_lshift2_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_lshift_s16_ip;
static inline void
orc_lshift_s16_ip (orc_int16 * ORC_RESTRICT d1, int p1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_lshift_s16_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_lshift_s32_ip;
static inline void
orc_lshift_s32_ip (orc_int32 * ORC_RESTRICT d1, int p1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_lshift_s32_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas2_add_s16_op;
static inline void
orc_mas2_add_s16_op (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, const orc_int16 * ORC_RESTRICT s3, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas2_add_s16_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas2_add_s16_ip;
static inline void
orc_mas2_add_s16_ip (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas2_add_s16_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas2_sub_s16_op;
static inline void
orc_mas2_sub_s16_op (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, const orc_int16 * ORC_RESTRICT s3, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas2_sub_s16_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas2_sub_s16_ip;
static inline void
orc_mas2_sub_s16_ip (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas2_sub_s16_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_vert_add_s16_1991;
static inline void
orc_mas4_vert_add_s16_1991 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, const orc_int16 * ORC_RESTRICT s3, const orc_int16 * ORC_RESTRICT s4, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_vert_add_s16_1991;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_vert_add_s32_1991;
static inline void
orc_mas4_vert_add_s32_1991 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, const orc_int32 * ORC_RESTRICT s4, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_vert_add_s32_1991;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_horiz_add_s16_1991_ip;
static inline void
orc_mas4_horiz_add_s16_1991_ip (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_horiz_add_s16_1991_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_vert_sub_s16_1991;
static inline void
orc_mas4_vert_sub_s16_1991 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, const orc_int16 * ORC_RESTRICT s3, const orc_int16 * ORC_RESTRICT s4, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_vert_sub_s16_1991;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_horiz_sub_s16_1991_ip;
static inline void
orc_mas4_horiz_sub_s16_1991_ip (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_horiz_sub_s16_1991_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_subtract_s16;
static inline void
orc_subtract_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_subtract_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add_s16_u8;
static inline void
orc_add_s16_u8 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_uint8 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add_s16_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add_s16_u8_2d;
static inline void
orc_add_s16_u8_2d (orc_int16 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add_s16_u8_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_convert_s16_u8;
static inline void
orc_convert_s16_u8 (orc_int16 * ORC_RESTRICT d1, const orc_uint8 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_convert_s16_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_convert_s16_s32;
static inline void
orc_convert_s16_s32 (orc_int16 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_convert_s16_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_convert_u8_s16;
static inline void
orc_convert_u8_s16 (orc_uint8 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_convert_u8_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_convert_s32_s16;
static inline void
orc_convert_s32_s16 (orc_int32 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_convert_s32_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_offsetconvert_u8_s16;
static inline void
orc_offsetconvert_u8_s16 (orc_uint8 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_offsetconvert_u8_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_offsetconvert_u8_s32;
static inline void
orc_offsetconvert_u8_s32 (orc_uint8 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_offsetconvert_u8_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_offsetconvert_s16_u8;
static inline void
orc_offsetconvert_s16_u8 (orc_int16 * ORC_RESTRICT d1, const orc_uint8 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_offsetconvert_s16_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_offsetconvert_s32_u8;
static inline void
orc_offsetconvert_s32_u8 (orc_int32 * ORC_RESTRICT d1, const orc_uint8 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_offsetconvert_s32_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_offsetconvert_s32_s16;
static inline void
orc_offsetconvert_s32_s16 (orc_int32 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_offsetconvert_s32_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_subtract_s16_u8;
static inline void
orc_subtract_s16_u8 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_uint8 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_subtract_s16_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_multiply_and_add_s16_u8;
static inline void
orc_multiply_and_add_s16_u8 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_uint8 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_multiply_and_add_s16_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_splat_s16_ns;
static inline void
orc_splat_s16_ns (orc_int16 * ORC_RESTRICT d1, int p1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_splat_s16_ns;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_splat_s32_ns;
static inline void
orc_splat_s32_ns (orc_int32 * ORC_RESTRICT d1, int p1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_splat_s32_ns;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_splat_s16_2d_4xn;
static inline void
orc_splat_s16_2d_4xn (orc_int16 * ORC_RESTRICT d1, int d1_stride, int p1, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_splat_s16_2d_4xn;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 4;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_splat_s16_2d_8xn;
static inline void
orc_splat_s16_2d_8xn (orc_int16 * ORC_RESTRICT d1, int d1_stride, int p1, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_splat_s16_2d_8xn;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 8;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_splat_s16_2d;
static inline void
orc_splat_s16_2d (orc_int16 * ORC_RESTRICT d1, int d1_stride, int p1, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_splat_s16_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_splat_u8_ns;
static inline void
orc_splat_u8_ns (orc_uint8 * ORC_RESTRICT d1, int p1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_splat_u8_ns;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_splat_u8_2d;
static inline void
orc_splat_u8_2d (orc_uint8 * ORC_RESTRICT d1, int d1_stride, int p1, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_splat_u8_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_average_u8;
static inline void
orc_average_u8 (orc_uint8 * ORC_RESTRICT d1, const orc_uint8 * ORC_RESTRICT s1, const orc_uint8 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_average_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_rrshift6_add_s16_2d;
static inline void
orc_rrshift6_add_s16_2d (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_int16 * ORC_RESTRICT s1, int s1_stride, const orc_int16 * ORC_RESTRICT s2, int s2_stride, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_rrshift6_add_s16_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_rrshift6_add_s32_2d;
static inline void
orc_rrshift6_add_s32_2d (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_int32 * ORC_RESTRICT s1, int s1_stride, const orc_int16 * ORC_RESTRICT s2, int s2_stride, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_rrshift6_add_s32_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_rrshift6_sub_s16_2d;
static inline void
orc_rrshift6_sub_s16_2d (orc_int16 * ORC_RESTRICT d1, int d1_stride, orc_int16 * ORC_RESTRICT d2, int d2_stride, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_rrshift6_sub_s16_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->params[ORC_VAR_D2] = d2_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_rrshift6_s16_ip_2d;
static inline void
orc_rrshift6_s16_ip_2d (orc_int16 * ORC_RESTRICT d1, int d1_stride, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_rrshift6_s16_ip_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_rrshift6_s16_ip;
static inline void
orc_rrshift6_s16_ip (orc_int16 * ORC_RESTRICT d1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_rrshift6_s16_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_unpack_yuyv_y;
static inline void
orc_unpack_yuyv_y (orc_uint8 * ORC_RESTRICT d1, const orc_uint16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_unpack_yuyv_y;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_unpack_yuyv_u;
static inline void
orc_unpack_yuyv_u (orc_uint8 * ORC_RESTRICT d1, const orc_uint32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_unpack_yuyv_u;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_unpack_yuyv_v;
static inline void
orc_unpack_yuyv_v (orc_uint8 * ORC_RESTRICT d1, const orc_uint32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_unpack_yuyv_v;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_packyuyv;
static inline void
orc_packyuyv (orc_uint32 * ORC_RESTRICT d1, const orc_uint8 * ORC_RESTRICT s1, const orc_uint8 * ORC_RESTRICT s2, const orc_uint8 * ORC_RESTRICT s3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_packyuyv;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_unpack_uyvy_y;
static inline void
orc_unpack_uyvy_y (orc_uint8 * ORC_RESTRICT d1, const orc_uint16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_unpack_uyvy_y;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_unpack_uyvy_u;
static inline void
orc_unpack_uyvy_u (orc_uint8 * ORC_RESTRICT d1, const orc_uint32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_unpack_uyvy_u;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_unpack_uyvy_v;
static inline void
orc_unpack_uyvy_v (orc_uint8 * ORC_RESTRICT d1, const orc_uint32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_unpack_uyvy_v;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_interleave2_s16;
static inline void
orc_interleave2_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_interleave2_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_interleave2_rrshift1_s16;
static inline void
orc_interleave2_rrshift1_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_interleave2_rrshift1_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_deinterleave2_s16;
static inline void
orc_deinterleave2_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_deinterleave2_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_deinterleave2_s32;
static inline void
orc_deinterleave2_s32 (orc_int32 * ORC_RESTRICT d1, orc_int32 * ORC_RESTRICT d2, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_deinterleave2_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_deinterleave2_lshift1_s16;
static inline void
orc_deinterleave2_lshift1_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_deinterleave2_lshift1_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_deinterleave2_lshift1_s32;
static inline void
orc_deinterleave2_lshift1_s32 (orc_int32 * ORC_RESTRICT d1, orc_int32 * ORC_RESTRICT d2, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_deinterleave2_lshift1_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_deint_lshift1_split_s16;
static inline void
orc_haar_deint_lshift1_split_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_deint_lshift1_split_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_deint_lshift1_split_s32;
static inline void
orc_haar_deint_lshift1_split_s32 (orc_int32 * ORC_RESTRICT d1, orc_int32 * ORC_RESTRICT d2, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_deint_lshift1_split_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_deint_split_s16;
static inline void
orc_haar_deint_split_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_deint_split_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_deint_split_s32;
static inline void
orc_haar_deint_split_s32 (orc_int32 * ORC_RESTRICT d1, orc_int32 * ORC_RESTRICT d2, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_deint_split_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_split_s16_lo;
static inline void
orc_haar_split_s16_lo (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_split_s16_lo;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_split_s16_hi;
static inline void
orc_haar_split_s16_hi (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_split_s16_hi;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_split_s16_op;
static inline void
orc_haar_split_s16_op (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_split_s16_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_split_s32_op;
static inline void
orc_haar_split_s32_op (orc_int32 * ORC_RESTRICT d1, orc_int32 * ORC_RESTRICT d2, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_split_s32_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_split_s16;
static inline void
orc_haar_split_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_split_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_s16_lo;
static inline void
orc_haar_synth_s16_lo (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_s16_lo;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_s16_hi;
static inline void
orc_haar_synth_s16_hi (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_s16_hi;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_s16_op;
static inline void
orc_haar_synth_s16_op (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_s16_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_s16;
static inline void
orc_haar_synth_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_rrshift1_int_s16;
static inline void
orc_haar_synth_rrshift1_int_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_rrshift1_int_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_int_s16;
static inline void
orc_haar_synth_int_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_int_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_sub_s16;
static inline void
orc_haar_sub_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_sub_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_add_half_s16;
static inline void
orc_haar_add_half_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_add_half_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_add_s16;
static inline void
orc_haar_add_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_add_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_sub_half_s16;
static inline void
orc_haar_sub_half_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_sub_half_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_sum_u8;
static inline void
orc_sum_u8 (orc_int32 * ORC_RESTRICT a1, const orc_uint8 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_sum_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_sum_s16;
static inline void
orc_sum_s16 (orc_int32 * ORC_RESTRICT a1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_sum_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_sum_square_diff_u8;
static inline void
orc_sum_square_diff_u8 (orc_int32 * ORC_RESTRICT a1, const orc_uint8 * ORC_RESTRICT s1, const orc_uint8 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_sum_square_diff_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_dequantise_s16_2d_4xn;
static inline void
orc_dequantise_s16_2d_4xn (orc_int16 * ORC_RESTRICT d1, int d1_stride, const orc_int16 * ORC_RESTRICT s1, int s1_stride, int p1, int p2, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_dequantise_s16_2d_4xn;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 4;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_dequantise_s16_2d_8xn;
static inline void
orc_dequantise_s16_2d_8xn (orc_int16 * ORC_RESTRICT d1, int d1_stride, const orc_int16 * ORC_RESTRICT s1, int s1_stride, int p1, int p2, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_dequantise_s16_2d_8xn;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 8;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_dequantise_s16_ip_2d_8xn;
static inline void
orc_dequantise_s16_ip_2d_8xn (orc_int16 * ORC_RESTRICT d1, int d1_stride, int p1, int p2, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_dequantise_s16_ip_2d_8xn;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 8;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_dequantise_s16_ip_2d;
static inline void
orc_dequantise_s16_ip_2d (orc_int16 * ORC_RESTRICT d1, int d1_stride, int p1, int p2, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_dequantise_s16_ip_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_dequantise_s16_ip;
static inline void
orc_dequantise_s16_ip (orc_int16 * ORC_RESTRICT d1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_dequantise_s16_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_dequantise_s16;
static inline void
orc_dequantise_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_dequantise_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_dequantise_var_s16_ip;
static inline void
orc_dequantise_var_s16_ip (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, const orc_int16 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_dequantise_var_s16_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_quantise1_s16;
static inline void
orc_quantise1_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_quantise1_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_quantise2_s16;
static inline void
orc_quantise2_s16 (orc_int16 * ORC_RESTRICT d1, const orc_int16 * ORC_RESTRICT s1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_quantise2_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_quantdequant1_s16;
static inline void
orc_quantdequant1_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, int p1, int p2, int p3, int p4, int p5, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_quantdequant1_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;
  ex->params[ORC_VAR_P5] = p5;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_quantdequant3_s16;
static inline void
orc_quantdequant3_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, int p1, int p2, int p3, int p4, int p5, int p6, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_quantdequant3_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;
  ex->params[ORC_VAR_P5] = p5;
  ex->params[ORC_VAR_P6] = p6;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_quantdequant2_s16;
static inline void
orc_quantdequant2_s16 (orc_int16 * ORC_RESTRICT d1, orc_int16 * ORC_RESTRICT d2, int p1, int p2, int p3, int p4, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_quantdequant2_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_downsample_vert_u8;
static inline void
orc_downsample_vert_u8 (orc_uint8 * ORC_RESTRICT d1, const orc_uint8 * ORC_RESTRICT s1, const orc_uint8 * ORC_RESTRICT s2, const orc_uint8 * ORC_RESTRICT s3, const orc_uint8 * ORC_RESTRICT s4, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_downsample_vert_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->arrays[ORC_VAR_S4] = (void *)s4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_downsample_horiz_u8;
static inline void
orc_downsample_horiz_u8 (orc_uint8 * ORC_RESTRICT d1, const orc_uint8 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_downsample_horiz_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_stats_moment_s16;
static inline void
orc_stats_moment_s16 (orc_int32 * ORC_RESTRICT a1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_stats_moment_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_stats_above_s16;
static inline void
orc_stats_above_s16 (orc_int32 * ORC_RESTRICT a1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_stats_above_s16;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_accw;
static inline void
orc_accw (int * ORC_RESTRICT a1, const orc_int16 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_accw;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_avg2_8xn_u8;
static inline void
orc_avg2_8xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_avg2_8xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 8;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_avg2_12xn_u8;
static inline void
orc_avg2_12xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_avg2_12xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 12;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_avg2_16xn_u8;
static inline void
orc_avg2_16xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_avg2_16xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 16;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_avg2_32xn_u8;
static inline void
orc_avg2_32xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_avg2_32xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 32;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_avg2_nxm_u8;
static inline void
orc_avg2_nxm_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_avg2_nxm_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine4_8xn_u8;
static inline void
orc_combine4_8xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, const orc_uint8 * ORC_RESTRICT s3, int s3_stride, const orc_uint8 * ORC_RESTRICT s4, int s4_stride, int p1, int p2, int p3, int p4, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine4_8xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 8;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_S3] = s3_stride;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_S4] = s4_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine4_12xn_u8;
static inline void
orc_combine4_12xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, const orc_uint8 * ORC_RESTRICT s3, int s3_stride, const orc_uint8 * ORC_RESTRICT s4, int s4_stride, int p1, int p2, int p3, int p4, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine4_12xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 12;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_S3] = s3_stride;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_S4] = s4_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine4_16xn_u8;
static inline void
orc_combine4_16xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, const orc_uint8 * ORC_RESTRICT s3, int s3_stride, const orc_uint8 * ORC_RESTRICT s4, int s4_stride, int p1, int p2, int p3, int p4, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine4_16xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 16;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_S3] = s3_stride;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_S4] = s4_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine4_24xn_u8;
static inline void
orc_combine4_24xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, const orc_uint8 * ORC_RESTRICT s3, int s3_stride, const orc_uint8 * ORC_RESTRICT s4, int s4_stride, int p1, int p2, int p3, int p4, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine4_24xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 24;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_S3] = s3_stride;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_S4] = s4_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine4_32xn_u8;
static inline void
orc_combine4_32xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, const orc_uint8 * ORC_RESTRICT s3, int s3_stride, const orc_uint8 * ORC_RESTRICT s4, int s4_stride, int p1, int p2, int p3, int p4, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine4_32xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 32;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_S3] = s3_stride;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_S4] = s4_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine4_nxm_u8;
static inline void
orc_combine4_nxm_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, const orc_uint8 * ORC_RESTRICT s3, int s3_stride, const orc_uint8 * ORC_RESTRICT s4, int s4_stride, int p1, int p2, int p3, int p4, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine4_nxm_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_S3] = s3_stride;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_S4] = s4_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine2_8xn_u8;
static inline void
orc_combine2_8xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int p1, int p2, int p3, int p4, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine2_8xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 8;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine2_12xn_u8;
static inline void
orc_combine2_12xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int p1, int p2, int p3, int p4, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine2_12xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 12;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine2_16xn_u8;
static inline void
orc_combine2_16xn_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int p1, int p2, int p3, int p4, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine2_16xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 16;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_combine2_nxm_u8;
static inline void
orc_combine2_nxm_u8 (orc_uint8 * ORC_RESTRICT d1, int d1_stride, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int p1, int p2, int p3, int p4, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_combine2_nxm_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;
  ex->params[ORC_VAR_P4] = p4;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_sad_nxm_u8;
static inline void
orc_sad_nxm_u8 (orc_uint32 * ORC_RESTRICT a1, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_sad_nxm_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_sad_8x8_u8;
static inline void
orc_sad_8x8_u8 (orc_uint32 * ORC_RESTRICT a1, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_sad_8x8_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 8;
  ORC_EXECUTOR_M(ex) = 8;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_sad_12x12_u8;
static inline void
orc_sad_12x12_u8 (orc_uint32 * ORC_RESTRICT a1, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_sad_12x12_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 12;
  ORC_EXECUTOR_M(ex) = 12;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_sad_16xn_u8;
static inline void
orc_sad_16xn_u8 (orc_uint32 * ORC_RESTRICT a1, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_sad_16xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 16;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_sad_32xn_u8;
static inline void
orc_sad_32xn_u8 (orc_uint32 * ORC_RESTRICT a1, const orc_uint8 * ORC_RESTRICT s1, int s1_stride, const orc_uint8 * ORC_RESTRICT s2, int s2_stride, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_sad_32xn_u8;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = 32;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_S1] = s1_stride;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->params[ORC_VAR_S2] = s2_stride;

  func = c->exec;
  func (ex);
  *a1 = orc_executor_get_accumulator (ex, ORC_VAR_A1);
}
extern OrcCode *_orc_code_orc_add2_rshift_add_s32_22_op;
static inline void
orc_add2_rshift_add_s32_22_op (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s32_22_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_vert_add_s32_1991_op;
static inline void
orc_mas4_vert_add_s32_1991_op (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, const orc_int32 * ORC_RESTRICT s4, const orc_int32 * ORC_RESTRICT s5, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_vert_add_s32_1991_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->arrays[ORC_VAR_S5] = (void *)s5;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_sub_s32_22_op;
static inline void
orc_add2_rshift_sub_s32_22_op (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_sub_s32_22_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_interleave2_rrshift1_s32;
static inline void
orc_interleave2_rrshift1_s32 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_interleave2_rrshift1_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_vert_sub_s32_1991_op;
static inline void
orc_mas4_vert_sub_s32_1991_op (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, const orc_int32 * ORC_RESTRICT s4, const orc_int32 * ORC_RESTRICT s5, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_vert_sub_s32_1991_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->arrays[ORC_VAR_S5] = (void *)s5;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_vert_sub_s32_1991;
static inline void
orc_mas4_vert_sub_s32_1991 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, const orc_int32 * ORC_RESTRICT s4, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_vert_sub_s32_1991;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->arrays[ORC_VAR_S4] = (void *)s4;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_horiz_add_s32_1991_ip;
static inline void
orc_mas4_horiz_add_s32_1991_ip (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_horiz_add_s32_1991_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_add_s32_11_op;
static inline void
orc_add2_rshift_add_s32_11_op (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s32_11_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas4_horiz_sub_s32_1991_ip;
static inline void
orc_mas4_horiz_sub_s32_1991_ip (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int p1, int p2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas4_horiz_sub_s32_1991_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_s32_lo;
static inline void
orc_haar_synth_s32_lo (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_s32_lo;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_int_s32;
static inline void
orc_haar_synth_int_s32 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_int_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_rrshift1_int_s32;
static inline void
orc_haar_synth_rrshift1_int_s32 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_rrshift1_int_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_interleave2_s32;
static inline void
orc_interleave2_s32 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_interleave2_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas2_sub_s32_ip;
static inline void
orc_mas2_sub_s32_ip (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas2_sub_s32_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas2_add_s32_ip;
static inline void
orc_mas2_add_s32_ip (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas2_add_s32_ip;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas2_add_s32_op;
static inline void
orc_mas2_add_s32_op (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas2_add_s32_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_mas2_sub_s32_op;
static inline void
orc_mas2_sub_s32_op (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, const orc_int32 * ORC_RESTRICT s2, const orc_int32 * ORC_RESTRICT s3, int p1, int p2, int p3, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_mas2_sub_s32_op;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;
  ex->arrays[ORC_VAR_S2] = (void *)s2;
  ex->arrays[ORC_VAR_S3] = (void *)s3;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;
  ex->params[ORC_VAR_P3] = p3;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_sub_s32_22;
static inline void
orc_add2_rshift_sub_s32_22 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_sub_s32_22;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_add2_rshift_add_s32_11;
static inline void
orc_add2_rshift_add_s32_11 (orc_int32 * ORC_RESTRICT d1, const orc_int32 * ORC_RESTRICT s1, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_add2_rshift_add_s32_11;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_S1] = (void *)s1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_haar_synth_s32;
static inline void
orc_haar_synth_s32 (orc_int32 * ORC_RESTRICT d1, orc_int32 * ORC_RESTRICT d2, int n)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_haar_synth_s32;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->arrays[ORC_VAR_D2] = d2;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_splat_s32_2d;
static inline void
orc_splat_s32_2d (orc_int32 * ORC_RESTRICT d1, int d1_stride, int p1, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_splat_s32_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->params[ORC_VAR_P1] = p1;

  func = c->exec;
  func (ex);
}
extern OrcCode *_orc_code_orc_dequantise_s32_ip_2d;
static inline void
orc_dequantise_s32_ip_2d (orc_int32 * ORC_RESTRICT d1, int d1_stride, int p1, int p2, int n, int m)
{
  OrcExecutor _ex, *ex = &_ex;
  OrcCode *c = _orc_code_orc_dequantise_s32_ip_2d;
  void (*func) (OrcExecutor *);

  ex->arrays[ORC_VAR_A2] = c;
  ex->program = 0;

  ex->n = n;
  ORC_EXECUTOR_M(ex) = m;
  ex->arrays[ORC_VAR_D1] = d1;
  ex->params[ORC_VAR_D1] = d1_stride;
  ex->params[ORC_VAR_P1] = p1;
  ex->params[ORC_VAR_P2] = p2;

  func = c->exec;
  func (ex);
}

#ifdef __cplusplus
}
#endif

#endif

